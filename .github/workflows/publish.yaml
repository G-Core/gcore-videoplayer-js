name: Publish on CDN

on:
  workflow_call:
    inputs:
      version:
        type: string
        description: 'Version to publish, e.g. v0.89.19, must be published to NPM first'
      latest:
        type: boolean
        description: 'Whether to publish the latest version'
        default: false
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Version to publish, e.g. v0.89.19, must be published to NPM first'
      latest:
        type: boolean
        description: 'Whether to publish the latest version'
        default: false

permissions:
  contents: read

jobs:
  publish:
    runs-on:
      - ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            ci
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11.2'
          cache-dependency-path: ci/requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install -r ci/requirements.txt
      - name: Download dist archive
        run: |
          VERSION=${VERSION#v}
          curl \
            -LSfs \
            -o package.tgz \
            https://registry.npmjs.org/@gcorevideo/player/-/player-$VERSION.tgz
          tar xf package.tgz
      - name: Upload to the bucket
        run: |
          LIBDIR=`pwd`/ci
          VERSION=${VERSION#v}
          cd package/dist
          python $LIBDIR/sri.py \
            -a sha256 \
            ./*.* > ./SHA256.txt
          python $LIBDIR/upload-s3.py \
            --endpoint https://$S3_HOSTNAME \
            --bucket player \
            . \
            $VERSION
          if [ "${{ inputs.latest }}" = true ]; then
            python $LIBDIR/upload-s3.py \
              --endpoint https://$S3_HOSTNAME \
              --bucket player \
              . \
              latest
          fi
        env:
          S3_HOSTNAME: ${{ secrets.S3_HOSTNAME }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
    env:
      VERSION: ${{ inputs.version }}
